{"version":3,"sources":["components/nav/index.js","components/app/index.js","components/Loading.js","components/ErrorMessage.js","api/index.js","pages/login/index.js","components/modal/index.js","components/createUserForm/index.js","utils/index.js","pages/admin/index.js","components/postArticleForm/index.js","components/articles/article.js","components/sessionExpired/index.js","components/articles/index.js","components/gifs/index.js","pages/user/index.js","components/NotFound.js","routes.js","serviceWorker.js","index.js"],"names":["Nav","isLoggedIn","bgText","logOut","className","to","onClick","App","isAuthed","Loading","color","size","style","textAlign","icon","faSpinner","spin","defaultProps","ErrorMessage","message","token","JSON","parse","localStorage","getItem","API","axios","create","baseURL","headers","defaults","common","Login","setLoginStatus","useState","email","password","inputVal","setInputVal","error","setError","isLoading","setIsLoading","handleChange","event","target","name","value","trim","handleSubmit","a","preventDefault","data","post","response","setUserData","status","msg","setItem","stringify","onSubmit","htmlFor","type","id","required","onChange","minLength","Modal","user","setUser","title","createUserForm","formValue","setFormValue","addUser","removeError","closeForm","firstName","lastName","autoComplete","jobRole","department","address","isAdmin","gender","firstLetterToUppercase","word","toUpperCase","substring","MONTHS","defaultFormValue","Admin","showForm","setShowForm","loading","setLoading","newUser","setNewUser","handleAddUser","config","toUpper","lastname","initialState","article","PostArticleForm","addPost","handleOnChange","autoCapitalize","placeholder","Article","createdon","authorid","console","log","str","date","Date","month","getMonth","getDate","formatDate","SessionExpired","Articles","userSession","setUserSession","setData","count","setCount","useEffect","didCancel","get","result","fetchData","formData","c","sort","b","sortArticle","map","key","Gifs","User","toggleView","setToggleView","session","setSession","userId","fourOfour","padding","fontSize","fontweight","NotFound","Routes","React","login","setLogin","removeItem","userData","basename","exact","path","render","props","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.778c01c6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\nimport { Link } from \"react-router-dom\";\nimport { PropTypes } from \"prop-types\";\n\nconst Nav = ({ isLoggedIn, bgText, logOut }) => {\n  return (\n    <nav className={`nav ${bgText}`}>\n      <Link to=\"/\">\n        <span className=\"nav-link\">TeamWork</span>\n      </Link>\n      {isLoggedIn ? (\n        <button onClick={logOut}>Logout</button>\n      ) : (\n        <Link to=\"/login\">\n          <button>Login</button>\n        </Link>\n      )}\n    </nav>\n  );\n};\n\nNav.propTypes = {\n  isLoggedIn: PropTypes.bool.isRequired,\n  bgText: PropTypes.string,\n  logOut: PropTypes.func.isRequired\n};\nexport default Nav;\n","import React from \"react\";\nimport \"./index.css\";\nimport Nav from \"../nav\";\nimport { Link } from \"react-router-dom\";\nimport { PropTypes } from \"prop-types\";\n\nfunction App({ isAuthed, logOut }) {\n  return (\n    <div className=\"App\">\n      <Nav isLoggedIn={isAuthed} logOut={logOut} />\n      <header className=\"App-header\">\n        <h1>Let's Connect as We Work Together</h1>\n        <p>- Post Gifs, Articles, Comments and more...</p>\n        <Link to=\"/user\">\n          <button>Get Started</button>\n        </Link>\n      </header>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  isAuthed: PropTypes.bool.isRequired,\n  logOut: PropTypes.func.isRequired\n};\n\nexport default App;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { PropTypes } from \"prop-types\";\n\nconst Loading = ({ color, size }) => (\n  <div style={{ color, textAlign: \"center\" }}>\n    <FontAwesomeIcon icon={faSpinner} spin size={size} />\n  </div>\n);\n\nLoading.defaultProps = { size: \"2x\", color: \"#5F7192\" };\n\nLoading.propTypes = {\n  size: PropTypes.string,\n  color: PropTypes.string\n};\nexport default Loading;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nconst ErrorMessage = ({ message, color = \"#000\" }) => (\n  <p className=\"error-text\" style={{color}} >Error: {message}</p>\n);\n\nErrorMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  color: PropTypes.string\n};\nexport default ErrorMessage;\n","import axios from \"axios\";\nconst { token } = JSON.parse(localStorage.getItem(\"data\")) || { token: \"\" };\nconst baseURL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8000/api/v1\"\n    : \"https://sink-teamwork-api.herokuapp.com/api/v1\";\n\nconst API = axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nAPI.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\nexport default API;\n","import React, { useState, Fragment } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./index.css\";\nimport Loading from \"../../components/Loading\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport API from \"../../api\";\n\nconst Login = ({ setLoginStatus, isAuthed }) => {\n  const [inputVal, setInputVal] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleChange = event => {\n    //hide error message\n    setError(null);\n    const { name, value } = event.target;\n    setInputVal({ ...inputVal, [name]: value.trim() });\n  };\n\n  const handleSubmit = async event => {\n    setError(null);\n    event.preventDefault();\n    setIsLoading(true);\n    const data = inputVal;\n    try {\n      const response = await API.post(\"auth/signin\", data);\n      setIsLoading(false);\n      setUserData(response.data.data);\n    } catch (error) {\n      setIsLoading(false);\n      const { data } = error.response;\n      setError({\n        status: \"error\",\n        msg: data.error\n      });\n    }\n  };\n\n  const setUserData = data => {\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    setLoginStatus(true);\n  };\n  return (\n    <Fragment>\n      {isAuthed && <Redirect to=\"/user\" />}\n      <div className=\"login-container\">\n        <form className=\"login-form\" onSubmit={handleSubmit}>\n          <h2>TeamWork</h2>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={inputVal.email}\n              className=\"form-input\"\n              required\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              minLength=\"5\"\n              id=\"password\"\n              name=\"password\"\n              value={inputVal.password}\n              className=\"form-input\"\n              required\n              onChange={handleChange}\n            />\n          </div>\n          {error && <ErrorMessage message={error.msg} />}\n          {isLoading && <Loading size=\"1x\" color=\"#fff\" />}\n          <button type=\"submit\" className=\"login-button\">\n            Login\n          </button>\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nLogin.propTypes = {\n  setLoginStatus: PropTypes.func.isRequired,\n  isAuthed: PropTypes.bool\n};\nexport default Login;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport \"./index.css\";\nconst Modal = ({ user, setUser }) => {\n  const onClose = () => {\n    //close modal\n    setUser(null);\n  };\n  return (\n    <div className=\"modal-content\">\n      <span onClick={onClose} title=\"OK\" className=\"modal-closer\">\n        &times;\n      </span>\n      <h2 className=\"modal-header\">User successfully created</h2>\n      <div className=\"modal-details\">\n        <p>Please save new user login details</p>\n        <span>\n          Email: <i>{user.email}</i>\n        </span>\n        <span>\n          Password: <b>{user.password}</b>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  user: PropTypes.object,\n  setUser: PropTypes.func.isRequired\n};\n\nexport default Modal;\n","import React from \"react\";\nimport \"./index.css\";\nimport { PropTypes } from \"prop-types\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport Loading from \"../Loading\";\nimport Modal from \"../modal\";\n\nconst createUserForm = ({\n  formValue,\n  setFormValue,\n  addUser,\n  isLoading,\n  error,\n  removeError,\n  closeForm,\n  user,\n  setUser\n}) => {\n  const handleChange = event => {\n    removeError();\n    const { name, value } = event.target;\n    if (name === \"address\") {\n      return setFormValue({ ...formValue, [name]: value });\n    }\n    return setFormValue({ ...formValue, [name]: value.trim() });\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    addUser(formValue);\n  };\n  return (\n    <div className=\"create-user-container\">\n      <p className=\"close-form\">\n        <span title=\"Close Form\" onClick={() => closeForm()}>\n          &times;\n        </span>\n      </p>\n      <form className=\"create-user-form\" onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"firstname\">Firstname</label>\n          <input\n            type=\"text\"\n            id=\"firstname\"\n            value={formValue.firstName}\n            name=\"firstName\"\n            className=\"form-input\"\n            required\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"lastname\">Lastname</label>\n          <input\n            type=\"lastname\"\n            id=\"lastname\"\n            value={formValue.lastName}\n            name=\"lastName\"\n            className=\"form-input\"\n            required\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={formValue.email}\n            name=\"email\"\n            className=\"form-input\"\n            required\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">\n            Password <span className=\"password-note\"> - Please note it</span>\n          </label>\n          <input\n            type=\"text\"\n            id=\"password\"\n            value={formValue.password}\n            name=\"password\"\n            autoComplete=\"off\"\n            minLength=\"5\"\n            className=\"form-input\"\n            required\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"jobrole\">Job Role</label>\n          <input\n            type=\"text\"\n            id=\"jobrole\"\n            value={formValue.jobRole}\n            name=\"jobRole\"\n            className=\"form-input\"\n            required\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"dept\">Department</label>\n          <input\n            type=\"text\"\n            id=\"dept\"\n            value={formValue.department}\n            name=\"department\"\n            className=\"form-input\"\n            required\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"address\">Address</label>\n          <input\n            type=\"text\"\n            id=\"address\"\n            value={formValue.address}\n            name=\"address\"\n            className=\"form-input\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"isadmin\">Admin</label>\n          <select\n            value={formValue.isAdmin}\n            id=\"isadmin\"\n            name=\"isAdmin\"\n            className=\"form-input\"\n            onChange={handleChange}\n          >\n            <option value={false}>No</option>\n            <option value={true}>Yes</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"gender\">Gender</label>\n          <select\n            value={formValue.gender}\n            id=\"gender\"\n            name=\"gender\"\n            className=\"form-input\"\n            onChange={handleChange}\n          >\n            <option value=\"Female\">Female</option>\n            <option value=\"Male\">Male</option>\n          </select>\n        </div>\n        {isLoading && <Loading size=\"1x\" color=\"#fff\" />}\n        {error && <ErrorMessage message={error.msg} />}\n        <button className=\"create-user-button btn-white\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n      {user && <Modal user={user} setUser={setUser} />}\n    </div>\n  );\n};\n\ncreateUserForm.propTypes = {\n  formValue: PropTypes.object.isRequired,\n  setFormValue: PropTypes.func.isRequired,\n  addUser: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  error: PropTypes.object,\n  removeError: PropTypes.func.isRequired,\n  closeForm: PropTypes.func.isRequired,\n  user: PropTypes.object,\n  setUser: PropTypes.func.isRequired\n};\nexport default createUserForm;\n","export const firstLetterToUppercase = word =>\n  word[0].toUpperCase() + word.substring(1);\nconst MONTHS = [\n  \"JAN\",\n  \"FEB\",\n  \"MAR\",\n  \"APR\",\n  \"MAY\",\n  \"JUN\",\n  \"JUL\",\n  \"AUG\",\n  \"SEP\",\n  \"OCT\",\n  \"NOV\",\n  \"DEC\"\n];\nexport const formatDate = str => {\n  const date = new Date(str);\n  const month = MONTHS[date.getMonth()];\n  const newDate = `${month} ${date.getDate()}`; // e.g \"DEC 31\"\n  return newDate;\n};\n\n\nexport const sortArticle = data => {\n  return data.sort((a, b) => {\n    return a.id - b.id;\n  });\n};\n\nexport const data = [\n  {\n    id: 10,\n    createdon: \"2019-11-18T23:00:00.000Z\",\n    title: \"updated title\",\n    article: \"This article has been updated\",\n    authorid: \"c308f87e-f84d-4479-80ce-e68b6b771ef3\"\n  },\n  {\n    id: 3,\n    createdon: \"2019-11-18T23:00:00.000Z\",\n    title: \"A cool title\",\n    article: \"Updated article 3, removed cool part\",\n    authorid: \"c308f87e-f84d-4479-80ce-e68b6b771ef3\"\n  },\n  {\n    id: 69,\n    createdon: \"2019-12-31T23:00:00.000Z\",\n    title: \"Another test article\",\n    article: \"Let's see if the component if re-render.\",\n    authorid: \"092e6fed-92b5-4dca-9d8a-66202521d951\"\n  },\n  {\n    id: 70,\n    createdon: \"2019-12-31T23:00:00.000Z\",\n    title: \"Mobile Web Specialist Track\",\n    article: \"Let's now see how it goes.\",\n    authorid: \"092e6fed-92b5-4dca-9d8a-66202521d951\"\n  },\n  {\n    id: 71,\n    createdon: \"2019-12-31T23:00:00.000Z\",\n    title: \"A new one again\",\n    article: \"I just want to be sure of what is going on.\",\n    authorid: \"092e6fed-92b5-4dca-9d8a-66202521d951\"\n  },\n  {\n    id: 67,\n    createdon: \"2019-12-31T23:00:00.000Z\",\n    title: \"Another article\",\n    article:\n      \"I wanna test if the  useEffect hook rerenders the component as expected.\",\n    authorid: \"092e6fed-92b5-4dca-9d8a-66202521d951\"\n  },\n  {\n    id: 66,\n    createdon: \"2019-12-31T23:00:00.000Z\",\n    title: \"A new article.\",\n    article:\n      \"A new article that I am excited to post.↵I am very excited about this.\",\n    authorid: \"092e6fed-92b5-4dca-9d8a-66202521d951\"\n  },\n  {\n    id: 68,\n    createdon: \"2019-12-31T23:00:00.000Z\",\n    title: \"A test article.\",\n    article: \"Another one to see if the component will re-render.\",\n    authorid: \"092e6fed-92b5-4dca-9d8a-66202521d951\"\n  }\n];\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { PropTypes } from \"prop-types\";\nimport \"./index.css\";\nimport Nav from \"../../components/nav\";\nimport CreateUserForm from \"../../components/createUserForm\";\nimport { firstLetterToUppercase as toUpper } from \"../../utils\";\nimport API from \"../../api\";\nconst defaultFormValue = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  gender: \"Female\",\n  password: \"\",\n  jobRole: \"\",\n  department: \"\",\n  address: \"\",\n  isAdmin: false\n};\n\nconst Admin = ({ isAuthed, logOut, data }) => {\n  const [showForm, setShowForm] = useState(false);\n  const [formValue, setFormValue] = useState(defaultFormValue);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [newUser, setNewUser] = useState(null);\n\n  const isAdmin = data && data.isAdmin;\n  const handleAddUser = async data => {\n    setLoading(true);\n    try {\n      const response = await API.post(\"/auth/create-user\", data);\n      setLoading(false);\n      setFormValue(defaultFormValue);\n      const { email, password } = JSON.parse(response.config.data);\n      setNewUser({ email, password });\n    } catch (error) {\n      setLoading(false);\n      const { data } = error.response;\n      setError({\n        status: \"error\",\n        msg: data.error\n      });\n    }\n  };\n  return (\n    <>\n      {!isAdmin ? (\n        <Redirect to=\"/user\" />\n      ) : (\n        <>\n          <Nav isLoggedIn={isAuthed} logOut={logOut} bgText=\"bg-text\" />\n          <main className=\"main-container\">\n            <h2>Welcome {toUpper(data.lastname)}</h2>\n            {!showForm && (\n              <button className=\"btn-white\" onClick={() => setShowForm(true)}>\n                Add User\n              </button>\n            )}\n          </main>\n          {showForm && (\n            <CreateUserForm\n              formValue={formValue}\n              setFormValue={setFormValue}\n              addUser={handleAddUser}\n              isLoading={loading}\n              error={error}\n              removeError={setError}\n              closeForm={setShowForm}\n              user={newUser}\n              setUser={setNewUser}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nAdmin.propTypes = {\n  isAuthed: PropTypes.bool.isRequired,\n  logOut: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\nexport default Admin;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./index.css\";\n\nconst initialState = { title: \"\", article: \"\" };\n\nconst PostArticleForm = ({ addPost }) => {\n  const [formValue, setFormValue] = useState(initialState);\n\n  const handleOnChange = event => {\n    const { name, value } = event.target;\n    return setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  };\n  const handleOnSubmit = event => {\n    event.preventDefault();\n    addPost(formValue);\n    setFormValue(initialState);\n  };\n  return (\n    <>\n      <hr></hr>\n    <div className=\"post-article-container\">\n      <h3 className=\"post-article-header\">Post Your Own Article</h3>\n      <form className=\"post-article-form\" onSubmit={handleOnSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"article-title\">Title</label>\n          <input\n            type=\"text\"\n            className=\"form-input\"\n            autoCapitalize=\"sentences\"\n            id=\"article-title\"\n            name=\"title\"\n            value={formValue.title}\n            onChange={handleOnChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"article-body\">Body</label>\n          <textarea\n            className=\"article-body form-input\"\n            id=\"article-body\"\n            autoCapitalize=\"sentences\"\n            name=\"article\"\n            value={formValue.article}\n            onChange={handleOnChange}\n            placeholder=\"Write here..\"\n            required\n          ></textarea>\n        </div>\n        <button type=\"submit\">Post</button>\n      </form>\n    </div>\n    </>\n  );\n};\n\nPostArticleForm.propTypes = {\n  addPost: PropTypes.func.isRequired\n};\n\nexport default PostArticleForm;\n","import React from \"react\";\nimport { formatDate } from \"../../utils\";\nimport \"./index.css\";\n\nconst Article = ({ data }) => {\n  const { id, createdon, title, article, authorid } = data;\n  const handleOnClick = () => {\n    console.log(\"authorId :\", authorid);\n    console.log(\"articleId :\", id);\n  };\n  return (\n    <li>\n      <div onClick={handleOnClick} className=\"message-box\">\n        <h3 className=\"message-title\"> {title}</h3>\n        <span className=\"message-date\">{formatDate(createdon)}</span>\n        <p className=\"message\">{article}</p>\n      </div>\n    </li>\n  );\n};\n\nexport default Article;\n","import React from \"react\";\nimport \"./index.css\";\nimport PropTypes from \"prop-types\";\n\nconst SessionExpired = ({ logOut }) => {\n  return (\n    <div className=\"session-expired-container bg-text\">\n      <h3>Your session has expired</h3>\n      <button className=\"btn-white\" onClick={() => logOut()}>Signin</button>\n    </div>\n  );\n};\n\nSessionExpired.propTypes = {\n  logOut: PropTypes.func.isRequired\n};\n\nexport default SessionExpired;\n","import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport PropTypes from \"prop-types\";\nimport PostArticleForm from \"../postArticleForm\";\nimport Article from \"./article\";\nimport Loading from \"../Loading\";\nimport API from \"../../api\";\nimport ErrorMessage from \"../ErrorMessage\";\nimport SessionExpired from \"../sessionExpired\";\nimport { sortArticle } from \"../../utils\";\n\nconst Articles = ({ logOut, userSession, setUserSession }) => {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    let didCancel = false;\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const result = await API.get(\"/feed/articles\");\n        if (!didCancel) {\n          setData(result.data.data);\n          setIsLoading(false);\n        }\n      } catch (error) {\n        setIsLoading(false);\n        if (error.response.status === 401) {\n          //if session expired\n          return setUserSession(false);\n        }\n        setError(\"Oops! Something went wrong.\");\n      }\n    };\n\n    fetchData();\n    return () => {\n      //clean up\n      didCancel = true;\n    };\n  }, [count, setUserSession]);\n\n  const addPost = async formData => {\n    try {\n      const response = await API.post(\"/articles\", formData);\n      if (response.data.data) {\n        //trigger useEffect hook\n        setCount(c => c + 1);\n      }\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <ul className=\"message-pane\">\n          {sortArticle(data).map(article => {\n            return <Article key={article.id} data={article} />;\n          })}\n        </ul>\n      )}\n      {!userSession && <SessionExpired logOut={logOut} />}\n      {error && <ErrorMessage message={error} />}\n      <PostArticleForm addPost={addPost} />\n    </>\n  );\n};\n\nArticles.propTypes = {\n  logOut: PropTypes.func.isRequired,\n  userSession: PropTypes.bool.isRequired,\n  setUserSession: PropTypes.func.isRequired\n};\n\nexport default Articles;\n","import React from \"react\";\nimport \"./index.css\";\n\nconst Gifs = () => {\n  return <div>Gifs Component not ready yet</div>;\n};\n\nexport default Gifs;\n","import React, { useState } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./index.css\";\nimport Nav from \"../../components/nav\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { firstLetterToUppercase as toUpper } from \"../../utils\";\nimport Articles from \"../../components/articles\";\nimport Gifs from \"../../components/gifs\";\n\nconst User = ({ isAuthed, logOut, data }) => {\n  const [toggleView, setToggleView] = useState(true);\n  const [session, setSession ] = useState(true);\n  // get loggedin user data from localStorage\n  const isAdmin = data && data.isAdmin;\n\n  const viewArticles = () => {\n    setToggleView(true);\n  };\n\n  const viewGifs = () => {\n    setToggleView(false);\n  };\n\n  return (\n    <>\n      {/* if user is not logged in, redirect to login page */}\n      {!data.userId ? (\n        <Redirect to=\"/login\" />\n      ) : (\n        <>\n          <Nav isLoggedIn={isAuthed} bgText=\"bg-text\" logOut={logOut} />\n          <main className=\"main-container\">\n            <h2>\n              Greetings! {toUpper(data.lastname)}{\" \"}\n              {isAdmin && (\n                <Link to=\"/admin\">\n                  <span className=\"role-text\">- Admin</span>{\" \"}\n                </Link>\n              )}\n            </h2>\n            <div>\n              {toggleView ? (\n                <button className=\"small-btn btn-white\" onClick={viewGifs}>\n                  View Gifs\n                </button>\n              ) : (\n                <button className=\"small-btn btn-white\" onClick={viewArticles}>\n                  View Articles\n                </button>\n              )}\n            </div>\n          </main>\n          <div className=\"post-view\">\n            {toggleView ? <Articles logOut={logOut} userSession={session} setUserSession={setSession} /> : <Gifs />}\n          </div>{\" \"}\n        </>\n      )}\n    </>\n  );\n};\n\nUser.propTypes = {\n  isAuthed: PropTypes.bool.isRequired,\n  logOut: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\nexport default User;\n","import React from \"react\";\nimport Nav from \"./nav\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\n\nconst fourOfour = {\n  textAlign: \"center\",\n  padding: \"2rem\",\n  color: \"#5F7192\",\n  fontSize: 120,\n  fontweight: \"bolder\"\n};\nconst NotFound = () => {\n  return (\n    <>\n      <Nav isLoggedIn={false} bgText=\"bg-text\" />\n      <main className=\"main-container\">\n        <h2>Oops! Page Not Found</h2>\n        <Link to=\"/\">\n          <button className=\"btn-white small-btn\">&larr; Home</button>\n        </Link>\n      </main>\n      <div style={fourOfour}>404</div>\n    </>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./components/app\";\nimport Login from \"./pages/login\";\nimport Admin from \"./pages/admin\";\nimport User from \"./pages/user\";\nimport NotFound from \"./components/NotFound\";\n\nconst Routes = () => {\n  const [login, setLogin] = React.useState(\n    localStorage.getItem(\"data\") ? true : false\n  );\n  const logOut = () => {\n    localStorage.removeItem(\"data\");\n    setLogin(false);\n  };\n  const userData = JSON.parse(localStorage.getItem(\"data\")) || {};\n\n  return (\n    <Router basename=\"/\">\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={props => <App {...props} isAuthed={login} logOut={logOut} />}\n        />\n        <Route\n          path=\"/login\"\n          render={props => (\n            <Login {...props} setLoginStatus={setLogin} isAuthed={login} />\n          )}\n        />\n        <Route\n          path=\"/admin\"\n          render={props => (\n            <Admin\n              {...props}\n              setLoginStatus={setLogin}\n              isAuthed={login}\n              logOut={logOut}\n              data={userData}\n            />\n          )}\n        />\n        <Route\n          path=\"/user\"\n          render={props => (\n            <User {...props} isAuthed={login} logOut={logOut} data={userData} />\n          )}\n        />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Routes from \"./routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Routes />, document.getElementById(\"root\"));\n\n//Hot Module Replacement\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept();\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}